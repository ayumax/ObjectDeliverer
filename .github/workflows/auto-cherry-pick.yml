name: Auto Cherry-Pick

on:
  workflow_dispatch:
    inputs:
      commit_ids:
        description: 'Comma-separated list of commit IDs to cherry-pick (e.g. "abc123,def456")'
        required: false
        type: string
        default: ''
      source_branch:
        description: 'Source branch to cherry-pick from (e.g. "master")'
        required: true
        type: string
      target_branch:
        description: 'Target branch to cherry-pick to (e.g. "develop")'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  cherry-pick:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Set up Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Process commit IDs
        id: commit_info
        run: |
          if [ -z "${{ inputs.commit_ids }}" ]; then
            # If no commit IDs provided, use the latest commit
            echo "commit_ids=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          else
            # Use provided commit IDs
            echo "commit_ids=${{ inputs.commit_ids }}" >> $GITHUB_OUTPUT
          fi

      - name: Cherry-pick and create PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SOURCE_BRANCH: ${{ inputs.source_branch }}
          TARGET_BRANCH: ${{ inputs.target_branch }}
          COMMIT_IDS: ${{ steps.commit_info.outputs.commit_ids }}
          REPO_NAME: ${{ github.repository }}
        run: |
          # Remove special characters from branch name
          safe_branch=$(echo $TARGET_BRANCH | sed 's/[^a-zA-Z0-9_-]/_/g')
          
          # Check if branches exist
          if ! git ls-remote --heads origin $SOURCE_BRANCH | grep -q $SOURCE_BRANCH; then
            echo "::error::Source branch $SOURCE_BRANCH does not exist"
            exit 1
          fi
          
          if ! git ls-remote --heads origin $TARGET_BRANCH | grep -q $TARGET_BRANCH; then
            echo "::error::Target branch $TARGET_BRANCH does not exist"
            exit 1
          fi
          
          # Start fresh
          git checkout -f $SOURCE_BRANCH
          
          # Checkout target branch with clean state
          git fetch origin $TARGET_BRANCH:refs/remotes/origin/$TARGET_BRANCH
          git checkout -B $TARGET_BRANCH origin/$TARGET_BRANCH
          
          # Process each commit ID
          IFS=',' read -ra COMMITS <<< "$COMMIT_IDS"
          for commit_id in "${COMMITS[@]}"; do
            commit_id=$(echo $commit_id | xargs)  # Trim whitespace
            commit_short=$(git rev-parse --short $commit_id)
            commit_message=$(git log -1 --pretty=%B $commit_id | base64 -w0)
            commit_author=$(git log -1 --pretty=%an $commit_id)
            
            cherry_branch="cherry-pick-${commit_short}-to-$safe_branch"
            
            # Create a new branch for cherry-picking
            git checkout -B $cherry_branch
            
            # Attempt cherry-pick
            if ! git cherry-pick $commit_id; then
              echo "::warning::Cherry-pick encountered conflicts for $TARGET_BRANCH. Committing conflicted state as-is for manual resolution."
  
              # Check if there are actual conflicts (unmerged files)
              if git status --porcelain | grep -q "^UU"; then
                git add .
                git commit -m "Cherry-pick $commit_short with conflicts (manual resolution required)"
              else
                # The cherry-pick resulted in an empty commit
                git cherry-pick --skip
                echo "::warning::Cherry-pick resulted in an empty commit, skipping..."
                continue
              fi
            else
              # If cherry-pick succeeded, remove workflow files
              git reset --soft HEAD^
              git checkout HEAD -- . ':!:.github/workflows/'
              git add .
              git commit -m "Cherry-pick $commit_short (excluding workflow files)"
            fi
            
            # Push to remote with force
            if ! git push -f origin $cherry_branch; then
              echo "::error::Failed to push to $cherry_branch"
              git checkout -f $SOURCE_BRANCH
              continue
            fi
            
            # Decode commit message
            DECODED_COMMIT_MESSAGE=$(echo "$commit_message" | base64 -d)
            
            # Set PR title and description
            PR_TITLE="[Cherry-pick][$TARGET_BRANCH] $(echo "$DECODED_COMMIT_MESSAGE" | head -n 1)"
            PR_BODY="Cherry-pick of commit $commit_id from $SOURCE_BRANCH to $TARGET_BRANCH.\n\nOriginal commit by: $commit_author\nOriginal commit message:\n\n$DECODED_COMMIT_MESSAGE"
            
            # Check if PR already exists
            PR_EXISTS=$(gh pr list --repo "$REPO_NAME" --base "$TARGET_BRANCH" --head "$cherry_branch" --json number --jq 'length')
            
            if [ "$PR_EXISTS" -eq "0" ]; then
              # Create PR using gh CLI
              if gh pr create --repo "$REPO_NAME" --base "$TARGET_BRANCH" --head "$cherry_branch" --title "$PR_TITLE" --body "$PR_BODY"; then
                echo "Successfully created PR to $TARGET_BRANCH for commit $commit_short"
              else
                echo "::error::Failed to create PR for $TARGET_BRANCH"
              fi
            else
              echo "PR already exists for $TARGET_BRANCH and commit $commit_short, skipping..."
            fi
          done
          
          # Return to source branch
          git checkout -f $SOURCE_BRANCH

