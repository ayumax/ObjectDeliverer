name: Auto Cherry-Pick

on:
  workflow_dispatch:
    inputs:
      commit_ids:
        description: 'Comma-separated list of commit IDs to cherry-pick (e.g. "abc123,def456")'
        required: false
        type: string
        default: ''

permissions:
  contents: write
  pull-requests: write

jobs:
  cherry-pick:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod a+x /usr/local/bin/yq

      - name: Read config file
        id: config
        run: |
          if [ -f .github/cherry-pick-config.yml ]; then
            echo "config_exists=true" >> $GITHUB_OUTPUT
            echo "target_branches<<EOF" >> $GITHUB_OUTPUT
            yq -o=json '.target_branches' .github/cherry-pick-config.yml >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "config_exists=false" >> $GITHUB_OUTPUT
            echo "::warning::Config file not found at .github/cherry-pick-config.yml"
          fi

      - name: Set up Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Process commit IDs
        id: commit_info
        run: |
          if [ -z "${{ inputs.commit_ids }}" ]; then
            # If no commit IDs provided, use the latest commit
            echo "commit_ids=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          else
            # Use provided commit IDs
            echo "commit_ids=${{ inputs.commit_ids }}" >> $GITHUB_OUTPUT
          fi

      - name: Cherry-pick and create PRs
        if: steps.config.outputs.config_exists == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET_BRANCHES: ${{ steps.config.outputs.target_branches }}
          COMMIT_IDS: ${{ steps.commit_info.outputs.commit_ids }}
          REPO_NAME: ${{ github.repository }}
        run: |
          # Parse JSON array with JQ for target branches
          echo "$TARGET_BRANCHES" | jq -c '.[]' | while read -r branch; do
            # Remove double quotes
            branch=$(echo $branch | tr -d '"')
            echo "Processing branch: $branch"
            
            # Remove special characters from branch name
            safe_branch=$(echo $branch | sed 's/[^a-zA-Z0-9_-]/_/g')
            
            # Check if branch exists
            if ! git ls-remote --heads origin $branch | grep -q $branch; then
              echo "::warning::Branch $branch does not exist, skipping..."
              continue
            fi
            
            # Start fresh
            git checkout -f master
            
            # Checkout target branch with clean state
            git fetch origin $branch:refs/remotes/origin/$branch
            git checkout -B $branch origin/$branch
            
            # Process each commit ID
            IFS=',' read -ra COMMITS <<< "$COMMIT_IDS"
            for commit_id in "${COMMITS[@]}"; do
              commit_id=$(echo $commit_id | xargs)  # Trim whitespace
              commit_short=$(git rev-parse --short $commit_id)
              commit_message=$(git log -1 --pretty=%B $commit_id | base64 -w0)
              commit_author=$(git log -1 --pretty=%an $commit_id)
              
              cherry_branch="cherry-pick-${commit_short}-to-$safe_branch"
              
              # Create a new branch for cherry-picking
              git checkout -B $cherry_branch
              
              # Attempt cherry-pick
              if ! git cherry-pick $commit_id; then
                echo "::warning::Cherry-pick encountered conflicts for $branch, attempting to resolve..."
                
                # Check if the cherry-pick resulted in an empty commit
                if git status --porcelain | grep -q "^UU"; then
                  # There are actual conflicts to resolve
                  # Remove workflow files from the cherry-pick
                  git reset --hard HEAD
                  git checkout $commit_id -- . ':!:.github/workflows/'
                  git add .
                  git commit -m "Cherry-pick $commit_short with conflicts to be resolved (excluding workflow files)"
                else
                  # The cherry-pick resulted in an empty commit
                  git cherry-pick --skip
                  echo "::warning::Cherry-pick resulted in an empty commit, skipping..."
                  continue
                fi
              fi
              
              # Push to remote with force
              if ! git push -f origin $cherry_branch; then
                echo "::error::Failed to push to $cherry_branch"
                git checkout -f master
                continue
              fi
              
              # Decode commit message
              DECODED_COMMIT_MESSAGE=$(echo "$commit_message" | base64 -d)
              
              # Set PR title and description
              PR_TITLE="[Cherry-pick][$branch] $(echo "$DECODED_COMMIT_MESSAGE" | head -n 1)"
              PR_BODY="Cherry-pick of commit $commit_id from master to $branch.\n\nOriginal commit by: $commit_author\nOriginal commit message:\n\n$DECODED_COMMIT_MESSAGE"
              
              # Check if PR already exists
              PR_EXISTS=$(gh pr list --repo "$REPO_NAME" --base "$branch" --head "$cherry_branch" --json number --jq 'length')
              
              if [ "$PR_EXISTS" -eq "0" ]; then
                # Create PR using gh CLI
                if gh pr create --repo "$REPO_NAME" --base "$branch" --head "$cherry_branch" --title "$PR_TITLE" --body "$PR_BODY"; then
                  echo "Successfully created PR to $branch for commit $commit_short"
                else
                  echo "::error::Failed to create PR for $branch"
                fi
              else
                echo "PR already exists for $branch and commit $commit_short, skipping..."
              fi
            done
            
            # Return to master branch
            git checkout -f master
          done

